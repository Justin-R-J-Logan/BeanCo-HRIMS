/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package com.hrims.main.frames;

import com.hrims.main.data.ScheduleDay;
import com.hrims.main.data.Account;
import com.hrims.main.data.DataGrabber;
import java.util.HashMap;
import java.util.Map;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Justin
 */
public class Properties_Editor<T extends DataGrabber> extends javax.swing.JInternalFrame {
    
    /**
     * Creates new form Interface_PropertyEditor
     */
    public Properties_Editor() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        panBottom = new javax.swing.JScrollPane();
        tblProps = new javax.swing.JTable();
        panTop = new javax.swing.JPanel();
        btnSave = new javax.swing.JButton();
        btnLoad = new javax.swing.JButton();
        btnCancel = new javax.swing.JButton();

        setTitle("Properties Editor");
        setToolTipText("");
        setMinimumSize(new java.awt.Dimension(640, 380));
        setPreferredSize(new java.awt.Dimension(640, 380));

        tblProps.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null},
                {null, null},
                {null, null},
                {null, null}
            },
            new String [] {
                "Property", "Value"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, true
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        panBottom.setViewportView(tblProps);

        getContentPane().add(panBottom, java.awt.BorderLayout.CENTER);

        panTop.setLayout(new java.awt.GridLayout(1, 4));

        btnSave.setText("Save");
        btnSave.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSaveActionPerformed(evt);
            }
        });
        panTop.add(btnSave);

        btnLoad.setText("Reload");
        btnLoad.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnLoadActionPerformed(evt);
            }
        });
        panTop.add(btnLoad);

        btnCancel.setText("Cancel");
        btnCancel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCancelActionPerformed(evt);
            }
        });
        panTop.add(btnCancel);

        getContentPane().add(panTop, java.awt.BorderLayout.PAGE_START);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnCancelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCancelActionPerformed
        t = null;
        this.setVisible(false);
    }//GEN-LAST:event_btnCancelActionPerformed

    private void btnLoadActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnLoadActionPerformed
        reload();
    }//GEN-LAST:event_btnLoadActionPerformed

    private void btnSaveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSaveActionPerformed
        Map<String, Object> props = new HashMap<String, Object>();
        for(int i = 0; i < tblProps.getRowCount(); i++) {
            String s = (String)tblProps.getModel().getValueAt(i, 0);
            Object o = tblProps.getModel().getValueAt(i, 1);
            props.put(s, o);
        }
        if(t.SetResources(props)) {
            if(t.Save()) {
                t = null;
                this.setVisible(false);
            } else {
                String infoMessage = "Error when saving to database. Please check code.";
                String titleBar = "Database Error";
                JOptionPane.showMessageDialog(null, infoMessage, "InfoBox: " + titleBar, JOptionPane.INFORMATION_MESSAGE);
            }
        } else {
            String infoMessage = "Error when saving properties. Please check code.";
            String titleBar = "Properties Error";
            JOptionPane.showMessageDialog(null, infoMessage, "InfoBox: " + titleBar, JOptionPane.INFORMATION_MESSAGE);
        }
    }//GEN-LAST:event_btnSaveActionPerformed
    
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnCancel;
    private javax.swing.JButton btnLoad;
    private javax.swing.JButton btnSave;
    private javax.swing.JScrollPane panBottom;
    private javax.swing.JPanel panTop;
    private javax.swing.JTable tblProps;
    // End of variables declaration//GEN-END:variables

    private T t;
    public void setObject(T t) {
        this.t = t;
        this.reload();
    }
    
    public void reload() {
        if(t != null) {
            Map<String, Object> props = t.getResources();
            int i = 0;
            DefaultTableModel dtm = (DefaultTableModel)tblProps.getModel();
            dtm.setRowCount(props.size()); // instead you can use your textfiled value here
            for(String s : props.keySet()) {
                tblProps.getModel().setValueAt(s, i, 0);
                tblProps.getModel().setValueAt(props.get(s), i, 1);
                i++;
            }
        }
    }
}

