package com.hrims.main.frames;


import com.hrims.main.GUIManager;
import com.hrims.main.data.Account;
import com.hrims.main.data.ScheduleDay;
import com.hrims.main.sql.SQLAccount;
import com.hrims.main.sql.SQLSchedule;
import java.util.ArrayList;
import java.util.Calendar;
import org.jdatepicker.JDatePicker;
import javax.swing.JOptionPane;

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

/**
 *
 * @author mrdsc
 */
public class Editor_Schedule extends javax.swing.JInternalFrame implements Updatable {

    /**
     * Creates new form Employee
     */
    public Editor_Schedule() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jspDataDisplay = new javax.swing.JScrollPane();
        tblData = new javax.swing.JTable();
        pnlManagement = new javax.swing.JPanel();
        java.sql.Date sqlDate = new java.sql.Date(Calendar.getInstance().getTime().getTime());
        jdpDatePicker = new JDatePicker(sqlDate);
        btnAdd = new javax.swing.JButton();
        btnEdit = new javax.swing.JButton();
        btnDelete = new javax.swing.JButton();
        pnlSearchPagination = new javax.swing.JPanel();
        pnlPagination = new javax.swing.JPanel();
        btnPrevious = new javax.swing.JButton();
        txtPageNumber = new javax.swing.JTextField();
        btnNext = new javax.swing.JButton();
        pnlSearch = new javax.swing.JPanel();
        cmbSearch = new javax.swing.JComboBox<>();
        txtSearch = new javax.swing.JTextField();
        btnSearch = new javax.swing.JButton();

        setClosable(true);
        setDefaultCloseOperation(javax.swing.WindowConstants.HIDE_ON_CLOSE);
        setIconifiable(true);
        setTitle("Schedule Editor");
        setMinimumSize(new java.awt.Dimension(1024, 540));
        setPreferredSize(new java.awt.Dimension(1024, 540));
        addComponentListener(new java.awt.event.ComponentAdapter() {
            public void componentShown(java.awt.event.ComponentEvent evt) {
                formComponentShown(evt);
            }
        });

        tblData.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, "8:00", "15:00", null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "User", "Time Start", "Time End", "Total Break Time"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.Integer.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, true, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tblData.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        jspDataDisplay.setViewportView(tblData);

        getContentPane().add(jspDataDisplay, java.awt.BorderLayout.CENTER);

        pnlManagement.setLayout(new java.awt.GridLayout(1, 0));

        jdpDatePicker.setDoubleBuffered(true);
        jdpDatePicker.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jdpDatePickerActionPerformed(evt);
            }
        });
        pnlManagement.add(jdpDatePicker);

        btnAdd.setText("Add");
        btnAdd.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAddActionPerformed(evt);
            }
        });
        pnlManagement.add(btnAdd);

        btnEdit.setText("Edit");
        btnEdit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnEditActionPerformed(evt);
            }
        });
        pnlManagement.add(btnEdit);

        btnDelete.setText("Delete");
        btnDelete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDeleteActionPerformed(evt);
            }
        });
        pnlManagement.add(btnDelete);

        getContentPane().add(pnlManagement, java.awt.BorderLayout.PAGE_START);

        pnlSearchPagination.setLayout(new java.awt.BorderLayout());

        pnlPagination.setLayout(new java.awt.GridLayout(1, 0));

        btnPrevious.setText("Previous");
        btnPrevious.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnPreviousActionPerformed(evt);
            }
        });
        pnlPagination.add(btnPrevious);

        txtPageNumber.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        txtPageNumber.setText("1");
        pnlPagination.add(txtPageNumber);

        btnNext.setText("Next");
        btnNext.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnNextActionPerformed(evt);
            }
        });
        pnlPagination.add(btnNext);

        pnlSearchPagination.add(pnlPagination, java.awt.BorderLayout.CENTER);

        pnlSearch.setLayout(new java.awt.BorderLayout());

        cmbSearch.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Location ID", "Address", "Phone", "Email", "Company" }));
        pnlSearch.add(cmbSearch, java.awt.BorderLayout.LINE_START);

        txtSearch.setText("Search");
        pnlSearch.add(txtSearch, java.awt.BorderLayout.CENTER);

        btnSearch.setText("Search");
        pnlSearch.add(btnSearch, java.awt.BorderLayout.LINE_END);

        pnlSearchPagination.add(pnlSearch, java.awt.BorderLayout.PAGE_START);

        getContentPane().add(pnlSearchPagination, java.awt.BorderLayout.PAGE_END);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /***
     * Returns to the previous page of the schedule list pagination. **Presently Page Number does nothing.
     * @param evt the calling event.
     */
    private void btnPreviousActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnPreviousActionPerformed
        btnNext.setEnabled(true);
        pageNumber--;
        if(pageNumber<0) pageNumber=0;
        Reload();
    }//GEN-LAST:event_btnPreviousActionPerformed

    /***
     * Proceeds to the next page of the the schedule list pagination. **Presently Page Number does nothing.
     * @param evt the calling event.
     */
    private void btnNextActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnNextActionPerformed
        btnPrevious.setEnabled(true);
        pageNumber++;
        Reload();
    }//GEN-LAST:event_btnNextActionPerformed

    
    /***
     * Calls the update function on the selection of a new date, repopulating
     * the array with new information, provided the event has the action command
     * "date selected", else prints the calling event to sout.
     * @param evt The calling event.
     */
    private void jdpDatePickerActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jdpDatePickerActionPerformed
        if (evt.getActionCommand().equalsIgnoreCase("date selected")){
            Update();
        } else {
            System.out.println("Event: " + evt.toString());
        }
    }//GEN-LAST:event_jdpDatePickerActionPerformed

    private void formComponentShown(java.awt.event.ComponentEvent evt) {//GEN-FIRST:event_formComponentShown
        Update();
    }//GEN-LAST:event_formComponentShown

    /***
     * Calls the Property Editor to handle the editing of information on a schedule
     * entry in the database.
     * 
     * Edit isn't being timed properly in relation to the entry of data, should
     * poke Justin about the handling to see if it can be worked out.
     * @param evt 
     */
    private void btnEditActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnEditActionPerformed
        int row = tblData.getSelectedRow();
        try {
            int accID = Integer.parseInt((String)tblData.getModel().getValueAt(row,0));
            
            ScheduleDay sched = null;
            Properties_Editor<ScheduleDay, Editor_Schedule> editor = (Properties_Editor<ScheduleDay, Editor_Schedule>)GUIManager.Lookup("Schedule_Property_Editor");
            for(ScheduleDay s : schedules) {
                if(s.getAccountid() == accID) {
                    sched = s;
                }
            }
            editor.setObject(sched);
            editor.setFrame(this);
            editor.setVisible(true);
        } catch (Exception ex) {
            ex.printStackTrace();
        }
        
        //Update();  //Call the update function to refresh the data loaded.
    }//GEN-LAST:event_btnEditActionPerformed

    /***
     * Calls the property handler to aid in creating a date object in the
     * database.
     * 
     * Currently doesn't function, need to poke justin about how the handler works.
     * @param evt 
     */
    private void btnAddActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAddActionPerformed
                
        try {
            ScheduleDay sched = new ScheduleDay(true);
            int year = jdpDatePicker.getModel().getYear();
            int month = jdpDatePicker.getModel().getMonth();
            int day = jdpDatePicker.getModel().getDay();
            java.sql.Date dateSelection = new java.sql.Date(year-1900, month, day);
            sched.setDate(dateSelection);
            Properties_Editor<ScheduleDay, Editor_Schedule> editor = (Properties_Editor<ScheduleDay, Editor_Schedule>)GUIManager.Lookup("Schedule_Property_Editor");
            editor.setObject(sched);
            editor.setFrame(this);
            editor.setVisible(true);
        } catch (Exception ex) {
            ex.printStackTrace();
        }
        
        Update();
    }//GEN-LAST:event_btnAddActionPerformed

    /***
     * Either call a handler, or otherwise do *stuff to delete a scheduleday from
     * the database.
     * @param evt 
     */
    private void btnDeleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDeleteActionPerformed
        int input = JOptionPane.showConfirmDialog(null, "Delete selected schedule?");
        if (input == 0){
            ScheduleDay sched = new ScheduleDay();
            int year = jdpDatePicker.getModel().getYear();
            int month = jdpDatePicker.getModel().getMonth();
            int day = jdpDatePicker.getModel().getDay();
            java.sql.Date dateSelection = new java.sql.Date(year-1900, month, day);
            sched.setDate(dateSelection);
            sched.setAccountid(Integer.parseInt(tblData.getModel().getValueAt(tblData.getSelectedRow(), 0).toString()));
            SQLSchedule.ME.deleteScheduleDay(sched);
        }
        Update();
    }//GEN-LAST:event_btnDeleteActionPerformed

    /***
     * Reloads the information displayed in the Data table.
     * 
     * Pagination should be functional, but without the ability to set 26 schedule
     * days, it's not really testable.
     */
    public void Reload() {
        //dateSelection = date from jdpDatePicker, make use of some method to convert if necessary.
        //ArrayList<ScheduleDay> schedules = SQLSchedule.ME.getSchedules(dateSelection);
        for(int y = 0; y < tblData.getRowCount(); y++) {
            for(int x = 0; x < tblData.getColumnCount(); x++) {
                if(y >= schedules.size()) {
                    tblData.getModel().setValueAt("", y, x);
                } else {
                    ScheduleDay schd = schedules.get(y + (pageNumber * resultsPerPage));
                    String information = "";
                    switch(x) {
                        case 0:
                            Account a = SQLAccount.ME.getAccount(schd.getAccountid());
                            information = "" + (a.getUsername() != "" ? a.getUsername() : "Deleted User").toString();//+l;
                            break;
                        case 1:
                            information = ""+schd.getStart();
                            break;
                        case 2:
                            information = ""+schd.getEnd();
                            break;
                        case 3:
                            information = ""+schd.getTotalBreakTime();
                            break;
                        case 4:
                            
                        }
                    tblData.getModel().setValueAt(information, y, x);
                }
            }
        }

        txtPageNumber.setText(""+(pageNumber+1));
        if (schedules.size() < ((resultsPerPage*pageNumber)+resultsPerPage)) {
            btnNext.setEnabled(false);
        }
        if (pageNumber == 0){
            btnPrevious.setEnabled(false);
        }

    }
    
    /***
     * On-call: Updates the data stored in the schedules array to the current date
     * stored in the Date Picker.
     */
    public void Update() {
        int year = jdpDatePicker.getModel().getYear();
        int month = jdpDatePicker.getModel().getMonth();
        int day = jdpDatePicker.getModel().getDay();
        java.sql.Date dateSelection = new java.sql.Date(year-1900, month, day);
        //System.out.println("Date: " + dateSelection.toString());
        schedules = SQLSchedule.ME.getSchedules(dateSelection);
        pageNumber = 0;
        Reload();
    }
    
    
    private final int resultsPerPage = 25; //Number of results displayed per page.
    private int pageNumber = 0; //Page number used for the internal pagination.
    ArrayList<ScheduleDay> schedules; //Arraylist containing the information 
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAdd;
    private javax.swing.JButton btnDelete;
    private javax.swing.JButton btnEdit;
    private javax.swing.JButton btnNext;
    private javax.swing.JButton btnPrevious;
    private javax.swing.JButton btnSearch;
    private javax.swing.JComboBox<String> cmbSearch;
    private org.jdatepicker.JDatePicker jdpDatePicker;
    private javax.swing.JScrollPane jspDataDisplay;
    private javax.swing.JPanel pnlManagement;
    private javax.swing.JPanel pnlPagination;
    private javax.swing.JPanel pnlSearch;
    private javax.swing.JPanel pnlSearchPagination;
    private javax.swing.JTable tblData;
    private javax.swing.JTextField txtPageNumber;
    private javax.swing.JTextField txtSearch;
    // End of variables declaration//GEN-END:variables
}
